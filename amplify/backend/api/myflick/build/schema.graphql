
type Conversation {
  createdAt: String
  id: ID!
  messages(after: String, first: Int): MessageConnection
  name: String!
}

type Message {
  author: User
  content: String!
  conversationId: ID!
  createdAt: String
  id: ID!
  isSent: Boolean
  recipient: User
  sender: String
}

type MessageConnection {
  messages: [Message]
  nextToken: String
}

type Mutation {
  createConversation(createdAt: String, id: ID!, name: String!): Conversation
  createMessage(content: String, conversationId: ID!, createdAt: String!, id: ID!): Message
  createUser(username: String!): User
  createUserConversations(conversationId: ID!, userId: ID!): UserConversations
}

type Query {
  allMessage(after: String, conversationId: ID!, first: Int): [Message]
  allMessageConnection(after: String, conversationId: ID!, first: Int): MessageConnection
  allMessageFrom(after: String, conversationId: ID!, first: Int, sender: String!): [Message]
  allUser(after: String, first: Int): [User]
  me: User
}

type Subscription {
  subscribeToNewMessage(conversationId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  subscribeToNewUCs(userId: ID!): UserConversations @aws_subscribe(mutations: ["createUserConversations"])
  subscribeToNewUsers: User @aws_subscribe(mutations: ["createUser"])
}

type User {
  cognitoId: ID!
  conversations(after: String, first: Int): UserConverstationsConnection
  id: ID!
  messages(after: String, first: Int): MessageConnection
  registered: Boolean
  username: String!
}

type UserConversations {
  associated: [UserConversations]
  conversation: Conversation
  conversationId: ID!
  user: User
  userId: ID!
}

type UserConverstationsConnection {
  nextToken: String
  userConversations: [UserConversations]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

