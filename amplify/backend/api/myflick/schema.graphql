# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Conversation {
  createdAt: String
  id: ID!
  messages(after: String, first: Int): MessageConnection
  name: String!
}

input CreateUserInput {
  cognitoId: String!
  email: String!
  email_verified: Boolean!
  firstName: String!
  picture: String!
  pronouns: String!
  bio: String
  location: String!
  photos: [String!]!
  interests: [String!]!
  loggedIn: Boolean!
  profileComplete: Boolean!
}

input DeleteUserInput {
  cognitoId: String!
  email: String!
}

type Message {
  author: User
  content: String!
  conversationId: ID!
  createdAt: String
  id: ID!
  isSent: Boolean
  recipient: User
  sender: String
}

type MessageConnection {
  messages: [Message]
  nextToken: String
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

type Mutation {
  createConversation(createdAt: String, id: ID!, name: String!): Conversation
  createMessage(
    content: String
    conversationId: ID!
    createdAt: String!
    id: ID!
  ): Message
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Query {
  allMessage(after: String, conversationId: ID!, first: Int): [Message]
  allMessageConnection(
    after: String
    conversationId: ID!
    first: Int
  ): MessageConnection
  allMessageFrom(
    after: String
    conversationId: ID!
    first: Int
    sender: String!
  ): [Message]
  me: User
  getUser(cognitoId: String!, email: String!): User
  listUsers(
    filter: TableUserFilterInput
    limit: Int
    nextToken: String
  ): UserConnection
}

type RandomInfo {
  randomString: String
  randomInt: Int
  randomFloat: Float
  randomBoolean: Boolean
}

type Subscription {
  subscribeToNewMessage(conversationId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onCreateUser(
    cognitoId: String
    email: String
    email_verified: Boolean
    firstName: String
    picture: String
  ): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(
    cognitoId: String
    email: String
    email_verified: Boolean
    firstName: String
    picture: String
  ): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(
    cognitoId: String
    email: String
    email_verified: Boolean
    firstName: String
    picture: String
  ): User @aws_subscribe(mutations: ["deleteUser"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableUserFilterInput {
  cognitoId: TableStringFilterInput
  email: TableStringFilterInput
  email_verified: TableBooleanFilterInput
  firstName: TableStringFilterInput
  picture: TableStringFilterInput
  pronouns: TableStringFilterInput
  bio: TableStringFilterInput
  location: TableStringFilterInput
  photos: TableStringFilterInput
  interests: TableStringFilterInput
  loggedIn: TableBooleanFilterInput
  profileComplete: TableBooleanFilterInput
}

input UpdateUserInput {
  cognitoId: String!
  email: String!
  email_verified: Boolean
  firstName: String
  picture: String
  pronouns: String
  bio: String
  location: String
  photos: [String!]
  interests: [String!]
  loggedIn: Boolean
  profileComplete: Boolean
}

type User {
  cognitoId: String!
  conversations(after: String, first: Int): UserConverstationsConnection
  messages(after: String, first: Int): MessageConnection
  email: String!
  email_verified: Boolean!
  firstName: String!
  picture: String!
  pronouns: String!
  bio: String
  location: String!
  photos: [String!]!
  interests: [String!]!
  loggedIn: Boolean!
  profileComplete: Boolean!
}

type UserConnection {
  items: [User]
  nextToken: String
}

type UserConversations {
  associated: [UserConversations]
  conversation: Conversation
  conversationId: ID!
  user: User
  userId: ID!
}

type UserConverstationsConnection {
  nextToken: String
  userConversations: [UserConversations]
}
